package com.github.jpmand.openproject.ui;

import com.github.jpmand.openproject.integration.util.OPBundle;
import com.intellij.ui.IdeBorderFactory;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

public class WorkPackageEditor {
    private JPanel contentPane;
    private JTabbedPane searchContentTabbedPane;
    private JPanel wpSearchPanel;
    private JFormattedTextField wpSearchBarTextField;
    private JScrollPane wpListScrollPane;
    private JRadioButton showClosedRadioBtn;
    private JComboBox orderByComboBox;
    private JList wpList;
    private JRadioButton assignedToMeRadioButton;

    public WorkPackageEditor() {
        wpSearchBarTextField.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {

            }
        });
        assignedToMeRadioButton.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {

            }
        });
        showClosedRadioBtn.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {

            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        searchContentTabbedPane = new JTabbedPane();
        searchContentTabbedPane.setTabLayoutPolicy(0);
        searchContentTabbedPane.setTabPlacement(1);
        contentPane.add(searchContentTabbedPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        wpSearchPanel = new JPanel();
        wpSearchPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        searchContentTabbedPane.addTab(this.$$$getMessageFromBundle$$$("messages/OPBundle", "toolwindow.search-panel.title"), wpSearchPanel);
        wpSearchBarTextField = new JFormattedTextField();
        wpSearchBarTextField.setHorizontalAlignment(10);
        wpSearchBarTextField.setText("");
        wpSearchPanel.add(wpSearchBarTextField, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        wpListScrollPane = new JScrollPane();
        wpSearchPanel.add(wpListScrollPane, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        wpListScrollPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 5, 5, 5), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        wpList = new JList();
        wpList.setLayoutOrientation(0);
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        defaultListModel1.addElement("A");
        defaultListModel1.addElement("B");
        defaultListModel1.addElement("C");
        defaultListModel1.addElement("D");
        defaultListModel1.addElement("E");
        defaultListModel1.addElement("F");
        defaultListModel1.addElement("G");
        defaultListModel1.addElement("H");
        defaultListModel1.addElement("J");
        wpList.setModel(defaultListModel1);
        wpList.setSelectionMode(0);
        wpList.putClientProperty("List.isFileList", Boolean.FALSE);
        wpListScrollPane.setViewportView(wpList);
        showClosedRadioBtn = new JRadioButton();
        this.$$$loadButtonText$$$(showClosedRadioBtn, this.$$$getMessageFromBundle$$$("messages/OPBundle", "toolWindow.search-panel.toolbar.showClosedRadioBtn.text"));
        wpSearchPanel.add(showClosedRadioBtn, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        orderByComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("");
        defaultComboBoxModel1.addElement("ID");
        defaultComboBoxModel1.addElement("Subject");
        defaultComboBoxModel1.addElement("Status");
        orderByComboBox.setModel(defaultComboBoxModel1);
        orderByComboBox.setToolTipText(this.$$$getMessageFromBundle$$$("messages/OPBundle", "toolWindow.search-panel.toolbar.orderByComboBox.tooltip"));
        wpSearchPanel.add(orderByComboBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(133, 34), null, 0, false));
        assignedToMeRadioButton = new JRadioButton();
        this.$$$loadButtonText$$$(assignedToMeRadioButton, this.$$$getMessageFromBundle$$$("messages/OPBundle", "toolWindow.search-panel.toolbar.showOnlyAssignedToMeRadioBtn.text"));
        wpSearchPanel.add(assignedToMeRadioButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(140, 25), null, 0, false));
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
